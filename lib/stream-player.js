// Generated by CoffeeScript 1.9.3
var Speaker, StreamPlayer, audioOptions, events, lame, loadNextSong, request, self,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Speaker = require('speaker');

lame = require('lame');

request = require('request');

events = require('events');

audioOptions = {
  channels: 2,
  bitDepth: 16,
  sampleRate: 44100,
  mode: lame.STEREO
};

self = null;

StreamPlayer = (function(superClass) {
  extend(StreamPlayer, superClass);

  function StreamPlayer() {
    events.EventEmitter.call(this);
    self = this;
    this.queue = [];
    this.trackInfo = [];
    this.currentSong = null;
    this.isPlaying = false;
  }

  StreamPlayer.prototype.play = function() {
    if (this.queue.length > 0 && !this.isPlaying) {
      return this.getStream(this.queue[0], this.playStream);
    } else if (this.isPlaying) {
      return new Error('A song is already playing.');
    } else {
      return new Error('The queue is empty.');
    }
  };

  StreamPlayer.prototype.add = function(url, track) {
    this.queue.push(url);
    this.trackInfo.push(track);
    return this.emit('song added');
  };

  StreamPlayer.prototype.nowPlaying = function() {
    if (typeof this.currentSong !== 'undefined' && this.isPlaying) {
      return this.currentSong;
    } else if (!this.isPlaying) {
      return new Error('No song is currently playing.');
    } else {
      return null;
    }
  };

  StreamPlayer.prototype.getQueue = function() {
    return this.trackInfo;
  };

  StreamPlayer.prototype.getStream = function(url, callback) {
    return request.get(url).on('response', function(res) {
      if (res.headers['content-type'] === 'audio/mpeg') {
        return callback(res);
      } else {
        self.emit('invalid url');
        return loadNextSong();
      }
    });
  };

  StreamPlayer.prototype.playStream = function(stream) {
    var decoder, speaker;
    decoder = new lame.Decoder();
    speaker = new Speaker(audioOptions);
    return stream.pipe(decoder).once('format', function() {
      decoder.pipe(speaker);
      self.queue.shift();
      self.currentSong = self.trackInfo.shift();
      self.isPlaying = true;
      self.emit('play start');
      return speaker.once('close', function() {
        return loadNextSong();
      });
    });
  };

  return StreamPlayer;

})(events.EventEmitter);

loadNextSong = function() {
  self.currentSong = null;
  self.isPlaying = false;
  self.emit('play end');
  return self.play();
};

module.exports = StreamPlayer;
